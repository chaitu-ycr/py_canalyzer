

function FindFiles (var filepath[], var prevFile[], var nextFile[])
{

  // local variables
  long handle;
  long counter = 0;

  char mFile[255]; // loaded measurement file in vSignalyzer
  char pFile[255]; // previous file in the FileFind function
  char cFile[255]; // current file in the FileFind function
  char searchmask[255];
  char filename[255];
  
  byte mFound = 0; // loaded measurement file found
  long mIndex = 0; // index of loaded measurement file


  FILE1.GetDatabaseName(mFile);
  SPrint(searchmask,"%s*.mdf", filepath);

  // Start searching files
  handle = FileFindFirst(searchmask, filename);

  switch (handle) 
  {
    case 0:  
    Write("No matching file found for search mask '%s'", searchmask);
    break;

    case -1: Write("Parameter error during calling FileFindFirst, search mask '%s'", searchmask);
    break;

    case -2: Write("Invalid search mask '%s'", searchmask);
    break;

    default:
    // FileFindFirst has found a file and returned a valid handle.
    // Report the file and repeat the serach until no more files are found
    do 
    {      
      counter++;
      SPrint(cFile,"%s%s", filepath, filename);

      if(StrCmp(cFile, mFile) == 0)
      {
        mIndex = counter;
        mFound = 1;
      }

      if(mFound == 1 && mIndex == counter)
        StrCpy(prevFile, pFile);
      
      if(mFound == 1 && mIndex+1 == counter)
        StrCpy(nextFile, cFile);

      StrCpy(pFile,cFile);      
    }
    while (FileFindNext(handle, filename) > 0);

    
    if(mFound == 1 && mIndex == 1)
      StrCpy(prevFile, mFile);

    if(mFound == 1 && mIndex == counter)
      StrCpy(nextFile, cFile);

    if(mFound == 0)
    {
      StrCpy(prevFile, cFile);
      StrCpy(nextFile, cFile);
    }    
    

    // Free the handle
    FileFindClose(handle);
    break;
  }

  return counter;
}