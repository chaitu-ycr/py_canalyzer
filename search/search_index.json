{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"py_canalyzer Python \ud83d\udc0d Package for controlling Vector CANalyzer Tool fork this repo and create pull request to contribute back to this project. GitHub Releases \ud83d\udc49 link PyPi Package \ud83d\udc49 link","title":"about"},{"location":"#py_canalyzer","text":"Python \ud83d\udc0d Package for controlling Vector CANalyzer Tool fork this repo and create pull request to contribute back to this project.","title":"py_canalyzer"},{"location":"#github-releases-link","text":"","title":"GitHub Releases \ud83d\udc49 link"},{"location":"#pypi-package-link","text":"","title":"PyPi Package \ud83d\udc49 link"},{"location":"002_prerequisites/","text":"Prerequisites Python(>=3.9) Vector CANalyzer software(>=v14) Windows PC(recommended win 10 os) visual studio code","title":"prerequisites"},{"location":"002_prerequisites/#prerequisites","text":"Python(>=3.9) Vector CANalyzer software(>=v14) Windows PC(recommended win 10 os) visual studio code","title":"Prerequisites"},{"location":"003_environment_setup/","text":"package environment setup and installation create python virtual environment python -m venv .venv activate virtual environment .venv\\Scripts\\activate upgrade pip python -m pip install pip --upgrade Install py_canalyzer package pip install py_canalyzer --upgrade","title":"setup"},{"location":"003_environment_setup/#package-environment-setup-and-installation","text":"create python virtual environment python -m venv .venv activate virtual environment .venv\\Scripts\\activate upgrade pip python -m pip install pip --upgrade Install py_canalyzer package pip install py_canalyzer --upgrade","title":"package environment setup and installation"},{"location":"004_usage/","text":"Usage Import CANalyzer module. # Import CANalyzer module. Always do this in your root script. from py_canalyzer import CANalyzer # create CANalyzer object. arguments are optional. Avoid creating multiple CANalyzer instances. canalyzer_inst = CANalyzer(py_log_dir=fr'{root_path}\\.py_canalyzer_log', user_capl_functions=('addition_function', 'hello_world')) Example use cases open CANalyzer, start measurement, get version info, stop measurement and close CANalyzer configuration canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.start_measurement() canalyzer_version_info = canalyzer_inst.get_canalyzer_version_info() canalyzer_inst.stop_measurement() canalyzer_inst.quit() restart/reset running measurement canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.start_measurement() canalyzer_inst.reset_measurement() canalyzer_inst.stop_ex_measurement() get/set canalyzer measurement index canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) meas_index_value = canalyzer_inst.get_measurement_index() canalyzer_inst.start_measurement() canalyzer_inst.stop_measurement() meas_index_value = canalyzer_inst.get_measurement_index() canalyzer_inst.set_measurement_index(meas_index_value + 1) meas_index_new = canalyzer_inst.get_measurement_index() canalyzer_inst.reset_measurement() canalyzer_inst.stop_measurement() save canalyzer config to a different version with different name canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.save_configuration_as(path=fr'D:\\py_canalyzer\\demo_cfg\\CANMainDemo\\CANMainDemo_v11.cfg', major=11, minor=0, create_dir=True) get CAN bus statistics of CAN channel 1 canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.start_measurement() wait(2) canalyzer_inst.get_can_bus_statistics(channel=1) canalyzer_inst.stop_measurement() get bus signal value, check signal state and get signal full name canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.start_measurement() wait(1) canalyzer_inst.get_signal_full_name(bus='CAN', channel=1, message='EngineData', signal='EngSpeed') canalyzer_inst.get_signal_value(bus='CAN', channel=1, message='EngineData', signal='EngSpeed', raw_value=False) wait(1) canalyzer_inst.check_signal_online(bus='CAN', channel=1, message='EngineData', signal='EngSpeed') canalyzer_inst.check_signal_state(bus='CAN', channel=1, message='EngineData', signal='EngSpeed') canalyzer_inst.get_signal_value(bus='CAN', channel=1, message='EngineData', signal='EngSpeed', raw_value=True) canalyzer_inst.stop_measurement() clear write window / read text from write window / control write window output file canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.enable_write_window_output_file(fr'{file_path}\\demo_cfg\\Logs\\write_win.txt') wait(1) canalyzer_inst.start_measurement() canalyzer_inst.clear_write_window_content() wait(1) canalyzer_inst.write_text_in_write_window(\"hello from py_canalyzer!\") wait(1) text = canalyzer_inst.read_text_from_write_window() canalyzer_inst.stop_measurement() canalyzer_inst.disable_write_window_output_file() wait(1) switch between canalyzer desktops canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.ui_activate_desktop('Analysis') get/set system variable or define system variable canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.start_measurement() wait(1) canalyzer_inst.set_system_variable_value('demo::level_two_1::sys_var2', 20) canalyzer_inst.set_system_variable_value('demo::string_var', 'hey hello this is string variable') canalyzer_inst.set_system_variable_value('demo::data_var', 'hey hello this is data variable') canalyzer_inst.set_system_variable_array_values('demo::int_array_var', (00, 11, 22, 33, 44, 55, 66, 77, 88, 99)) wait(0.1) sys_var_val = canalyzer_inst.get_system_variable_value('demo::level_two_1::sys_var2') sys_var_val = canalyzer_inst.get_system_variable_value('demo::data_var') canalyzer_inst.stop_measurement() # define system variable and use it in measurement canalyzer_inst.define_system_variable('sys_demo::demo', 1) canalyzer_inst.save_configuration() canalyzer_inst.start_measurement() wait(1) sys_var_val = canalyzer_inst.get_system_variable_value('sys_demo::demo') canalyzer_inst.stop_measurement() compile CAPL nodes and call capl function canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.compile_all_capl_nodes() canalyzer_inst.start_measurement() wait(1) canalyzer_inst.call_capl_function('addition_function', 100, 200) canalyzer_inst.call_capl_function('hello_world') canalyzer_inst.stop_measurement()","title":"usage"},{"location":"004_usage/#usage","text":"","title":"Usage"},{"location":"004_usage/#import-canalyzer-module","text":"# Import CANalyzer module. Always do this in your root script. from py_canalyzer import CANalyzer # create CANalyzer object. arguments are optional. Avoid creating multiple CANalyzer instances. canalyzer_inst = CANalyzer(py_log_dir=fr'{root_path}\\.py_canalyzer_log', user_capl_functions=('addition_function', 'hello_world'))","title":"Import CANalyzer module."},{"location":"004_usage/#example-use-cases","text":"","title":"Example use cases"},{"location":"004_usage/#open-canalyzer-start-measurement-get-version-info-stop-measurement-and-close-canalyzer-configuration","text":"canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.start_measurement() canalyzer_version_info = canalyzer_inst.get_canalyzer_version_info() canalyzer_inst.stop_measurement() canalyzer_inst.quit()","title":"open CANalyzer, start measurement, get version info, stop measurement and close CANalyzer configuration"},{"location":"004_usage/#restartreset-running-measurement","text":"canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.start_measurement() canalyzer_inst.reset_measurement() canalyzer_inst.stop_ex_measurement()","title":"restart/reset running measurement"},{"location":"004_usage/#getset-canalyzer-measurement-index","text":"canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) meas_index_value = canalyzer_inst.get_measurement_index() canalyzer_inst.start_measurement() canalyzer_inst.stop_measurement() meas_index_value = canalyzer_inst.get_measurement_index() canalyzer_inst.set_measurement_index(meas_index_value + 1) meas_index_new = canalyzer_inst.get_measurement_index() canalyzer_inst.reset_measurement() canalyzer_inst.stop_measurement()","title":"get/set canalyzer measurement index"},{"location":"004_usage/#save-canalyzer-config-to-a-different-version-with-different-name","text":"canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.save_configuration_as(path=fr'D:\\py_canalyzer\\demo_cfg\\CANMainDemo\\CANMainDemo_v11.cfg', major=11, minor=0, create_dir=True)","title":"save canalyzer config to a different version with different name"},{"location":"004_usage/#get-can-bus-statistics-of-can-channel-1","text":"canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.start_measurement() wait(2) canalyzer_inst.get_can_bus_statistics(channel=1) canalyzer_inst.stop_measurement()","title":"get CAN bus statistics of CAN channel 1"},{"location":"004_usage/#get-bus-signal-value-check-signal-state-and-get-signal-full-name","text":"canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.start_measurement() wait(1) canalyzer_inst.get_signal_full_name(bus='CAN', channel=1, message='EngineData', signal='EngSpeed') canalyzer_inst.get_signal_value(bus='CAN', channel=1, message='EngineData', signal='EngSpeed', raw_value=False) wait(1) canalyzer_inst.check_signal_online(bus='CAN', channel=1, message='EngineData', signal='EngSpeed') canalyzer_inst.check_signal_state(bus='CAN', channel=1, message='EngineData', signal='EngSpeed') canalyzer_inst.get_signal_value(bus='CAN', channel=1, message='EngineData', signal='EngSpeed', raw_value=True) canalyzer_inst.stop_measurement()","title":"get bus signal value, check signal state and get signal full name"},{"location":"004_usage/#clear-write-window-read-text-from-write-window-control-write-window-output-file","text":"canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.enable_write_window_output_file(fr'{file_path}\\demo_cfg\\Logs\\write_win.txt') wait(1) canalyzer_inst.start_measurement() canalyzer_inst.clear_write_window_content() wait(1) canalyzer_inst.write_text_in_write_window(\"hello from py_canalyzer!\") wait(1) text = canalyzer_inst.read_text_from_write_window() canalyzer_inst.stop_measurement() canalyzer_inst.disable_write_window_output_file() wait(1)","title":"clear write window / read text from write window / control write window output file"},{"location":"004_usage/#switch-between-canalyzer-desktops","text":"canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.ui_activate_desktop('Analysis')","title":"switch between canalyzer desktops"},{"location":"004_usage/#getset-system-variable-or-define-system-variable","text":"canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.start_measurement() wait(1) canalyzer_inst.set_system_variable_value('demo::level_two_1::sys_var2', 20) canalyzer_inst.set_system_variable_value('demo::string_var', 'hey hello this is string variable') canalyzer_inst.set_system_variable_value('demo::data_var', 'hey hello this is data variable') canalyzer_inst.set_system_variable_array_values('demo::int_array_var', (00, 11, 22, 33, 44, 55, 66, 77, 88, 99)) wait(0.1) sys_var_val = canalyzer_inst.get_system_variable_value('demo::level_two_1::sys_var2') sys_var_val = canalyzer_inst.get_system_variable_value('demo::data_var') canalyzer_inst.stop_measurement() # define system variable and use it in measurement canalyzer_inst.define_system_variable('sys_demo::demo', 1) canalyzer_inst.save_configuration() canalyzer_inst.start_measurement() wait(1) sys_var_val = canalyzer_inst.get_system_variable_value('sys_demo::demo') canalyzer_inst.stop_measurement()","title":"get/set system variable or define system variable"},{"location":"004_usage/#compile-capl-nodes-and-call-capl-function","text":"canalyzer_inst.open(canalyzer_cfg=fr'{file_path}\\demo_cfg\\CANMainDemo\\CANMainDemo.cfg', visible=True, auto_save=False, prompt_user=False) canalyzer_inst.compile_all_capl_nodes() canalyzer_inst.start_measurement() wait(1) canalyzer_inst.call_capl_function('addition_function', 100, 200) canalyzer_inst.call_capl_function('hello_world') canalyzer_inst.stop_measurement()","title":"compile CAPL nodes and call capl function"},{"location":"999_reference/","text":"reference Python package for controlling Vector CANalyzer tool CANalyzer(py_log_dir='', user_capl_functions=tuple()) The CANalyzer class represents the CANalyzer application. The CANalyzer class is the foundation for the object hierarchy. You can reach all other methods from the CANalyzer class instance. add_offline_source_log_file(absolute_log_file_path) this method adds offline source log file. Parameters: absolute_log_file_path ( str ) \u2013 absolute path of offline source log file. Returns: bool ( bool ) \u2013 returns True if log file added or already available. False if log file not available. break_measurement_in_offline_mode() Interrupts the playback in Offline mode. call_capl_function(name, *arguments) Calls a CAPL function. Please note that the number of parameters must agree with that of the CAPL function. not possible to read return value of CAPL function at the moment. only execution status is returned. Parameters: name ( str ) \u2013 The name of the CAPL function. Please make sure this name is already passed as argument during CANalyzer instance creation. see example for more info. arguments ( tuple , default: () ) \u2013 Function parameters p1\u2026p10 (optional). Returns: bool ( bool ) \u2013 CAPL function execution status. True-success, False-failed. check_j1939_signal_online(bus, channel, message, signal, source_addr, dest_addr) Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. Returns: bool ( bool ) \u2013 TRUE: if the measurement is running and the signal has been received. FALSE: if not. check_j1939_signal_state(bus, channel, message, signal, source_addr, dest_addr) Returns the state of the signal. Returns: int ( int ) \u2013 State of the signal. possible values are: 0: The default value of the signal is returned. 1: The measurement is not running; the value set by the application is returned. 3: The signal has been received in the current measurement; the current value is returned. check_signal_online(bus, channel, message, signal) Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: bool \u2013 TRUE if the measurement is running and the signal has been received. FALSE if not. check_signal_state(bus, channel, message, signal) Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: int \u2013 State of the signal. 0- The default value of the signal is returned. 1- The measurement is not running; the value set by the application is returned. 2- The measurement is not running; the value of the last measurement is returned. 3- The signal has been received in the current measurement; the current value is returned. clear_write_window_content() Clears the contents of the Write Window. compile_all_capl_nodes() compiles all CAPL, XML and .NET nodes. copy_write_window_content() Copies the contents of the Write Window to the clipboard. define_system_variable(sys_var_name, value) define_system_variable Create a system variable with an initial value Args: sys_var_name (str): The name of the system variable. Ex- \"sys_var_demo::speed\" value (Union[int, float, str]): variable value. Default value 0. Returns: object ( object ) \u2013 The new Variable object. disable_write_window_output_file(tab_index=None) Disables logging of all outputs of the Write Window. Parameters: tab_index ( int , default: None ) \u2013 The index of the page, for which logging of the output is to be activated. Defaults to None. enable_write_window_output_file(output_file, tab_index=None) Enables logging of all outputs of the Write Window in the output file. Parameters: output_file ( str ) \u2013 The complete path of the output file. tab_index ( int , default: None ) \u2013 The index of the page, for which logging of the output is to be activated. Defaults to None. get_application_info() Vector CANalyzer Application Version. Returns: str ( str ) \u2013 return Vector CANalyzer Application Version. \"major.minor.build\" -> \"12.01.04\" get_can_bus_statistics(channel) Returns CAN Bus Statistics. Parameters: channel ( int ) \u2013 The channel of the statistic that is to be returned. Returns: dict \u2013 CAN bus statistics. get_canalyzer_version_info() The Version class represents the version of the CANalyzer application. Returns: dict \u2013 \"full_name\" - The complete CANalyzer version. dict \u2013 \"name\" - The CANalyzer version. dict \u2013 \"build\" - The build number of the CANalyzer application. dict \u2013 \"major\" - The major version number of the CANalyzer application. dict \u2013 \"minor\" - The minor version number of the CANalyzer application. dict \u2013 \"patch\" - The patch number of the CANalyzer application. get_j1939_signal_full_name(bus, channel, message, signal, source_addr, dest_addr) Determines the fully qualified name of a signal. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. Returns: str ( str ) \u2013 The fully qualified name of a signal. The following format will be used for signals: :: :: get_j1939_signal_value(bus, channel, message, signal, source_addr, dest_addr, raw_value=False) get_j1939_signal Returns a Signal object. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. Returns: Union [ float , int ] \u2013 signal value. get_measurement_index() gets the measurement index for the next measurement. Returns: int \u2013 Measurement Index. get_measurement_running_status() Returns the running state of the measurement. Returns: bool \u2013 True if The measurement is running. bool \u2013 False if The measurement is not running. get_signal_full_name(bus, channel, message, signal) Determines the fully qualified name of a signal. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: str ( str ) \u2013 The fully qualified name of a signal. The following format will be used for signals: :: :: get_signal_value(bus, channel, message, signal, raw_value=False) get_signal_value Returns a Signal value. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. Returns: Union [ float , int ] \u2013 signal value. get_system_variable_value(sys_var_name) get_system_variable_value Returns a system variable value. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\" Returns: Union [ int , float , str , tuple , None] \u2013 System Variable value. new(auto_save=False, prompt_user=False) Creates a new configuration. Parameters: auto_save ( bool , default: False ) \u2013 A boolean value that indicates whether the active configuration should be saved if it has been changed. Defaults to False. prompt_user ( bool , default: False ) \u2013 A boolean value that indicates whether the user should intervene in error situations. Defaults to False. open(canalyzer_cfg, visible=True, auto_save=False, prompt_user=False) Loads CANalyzer configuration. Parameters: canalyzer_cfg ( str ) \u2013 The complete path for the CANalyzer configuration. visible ( bool , default: True ) \u2013 True if you want to see CANalyzer UI. Defaults to True. auto_save ( bool , default: False ) \u2013 A boolean value that indicates whether the active configuration should be saved if it has been changed. Defaults to False. prompt_user ( bool , default: False ) \u2013 A boolean value that indicates whether the user should intervene in error situations. Defaults to False. Raises: FileNotFoundError \u2013 error when CANalyzer config file not available in pc. quit() Quits the application. read_text_from_write_window() read the text contents from Write Window. Returns: str \u2013 The text content. reset_measurement() reset the measurement. Returns: bool \u2013 Measurement running status(True/False). reset_measurement_in_offline_mode() Resets the measurement in Offline mode. save_configuration() Saves the configuration. Returns: bool \u2013 True if configuration saved. else False. save_configuration_as(path, major, minor, create_dir=True) Saves the configuration as a different CANalyzer version. Parameters: path ( str ) \u2013 The complete file name. major ( int ) \u2013 The major version number of the target version. minor ( int ) \u2013 The minor version number of the target version. create_dir ( bool , default: True ) \u2013 create directory if not available. default value True. Returns: bool \u2013 True if configuration saved. else False. set_measurement_index(index) sets the measurement index for the next measurement. Parameters: index ( int ) \u2013 index value to set. Returns: int \u2013 Measurement Index value. set_system_variable_array_values(sys_var_name, value, index=0) set_system_variable_array_values sets array of values to system variable. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\" value ( tuple ) \u2013 variable values. supported integer array or double array. please always give only one type. index ( int , default: 0 ) \u2013 value of index where values will start updating. Defaults to 0. set_system_variable_value(sys_var_name, value) set_system_variable_value sets a value to system variable. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\". value ( Union [ int , float , str ] ) \u2013 variable value. supported CAPL system variable data types integer, double, string and data. start_measurement(timeout=60) Starts the measurement. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement started. else False. start_measurement_in_animation_mode(animation_delay=100) Starts the measurement in Animation mode. Parameters: animation_delay ( int , default: 100 ) \u2013 The animation delay during the measurement in Offline Mode. step_measurement_event_in_single_step() Processes a measurement event in single step. stop_ex_measurement(timeout=60) StopEx repairs differences in the behavior of the Stop method on deferred stops concerning simulated and real mode in CANalyzer. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement stopped. else False. stop_measurement(timeout=60) Stops the measurement. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement stopped. else False. ui_activate_desktop(name) Activates the desktop with the given name. Parameters: name ( str ) \u2013 The name of the desktop to be activated. ui_open_baudrate_dialog() opens the dialog for configuring the bus parameters. Make sure Measurement stopped when using this method. write_text_in_write_window(text) Outputs a line of text in the Write Window. Args: text (str): The text.","title":"reference"},{"location":"999_reference/#reference","text":"Python package for controlling Vector CANalyzer tool","title":"reference"},{"location":"999_reference/#src.py_canalyzer.CANalyzer","text":"The CANalyzer class represents the CANalyzer application. The CANalyzer class is the foundation for the object hierarchy. You can reach all other methods from the CANalyzer class instance.","title":"CANalyzer"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.add_offline_source_log_file","text":"this method adds offline source log file. Parameters: absolute_log_file_path ( str ) \u2013 absolute path of offline source log file. Returns: bool ( bool ) \u2013 returns True if log file added or already available. False if log file not available.","title":"add_offline_source_log_file"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.break_measurement_in_offline_mode","text":"Interrupts the playback in Offline mode.","title":"break_measurement_in_offline_mode"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.call_capl_function","text":"Calls a CAPL function. Please note that the number of parameters must agree with that of the CAPL function. not possible to read return value of CAPL function at the moment. only execution status is returned. Parameters: name ( str ) \u2013 The name of the CAPL function. Please make sure this name is already passed as argument during CANalyzer instance creation. see example for more info. arguments ( tuple , default: () ) \u2013 Function parameters p1\u2026p10 (optional). Returns: bool ( bool ) \u2013 CAPL function execution status. True-success, False-failed.","title":"call_capl_function"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.check_j1939_signal_online","text":"Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. Returns: bool ( bool ) \u2013 TRUE: if the measurement is running and the signal has been received. FALSE: if not.","title":"check_j1939_signal_online"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.check_j1939_signal_state","text":"Returns the state of the signal. Returns: int ( int ) \u2013 State of the signal. possible values are: 0: The default value of the signal is returned. 1: The measurement is not running; the value set by the application is returned. 3: The signal has been received in the current measurement; the current value is returned.","title":"check_j1939_signal_state"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.check_signal_online","text":"Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: bool \u2013 TRUE if the measurement is running and the signal has been received. FALSE if not.","title":"check_signal_online"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.check_signal_state","text":"Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: int \u2013 State of the signal. 0- The default value of the signal is returned. 1- The measurement is not running; the value set by the application is returned. 2- The measurement is not running; the value of the last measurement is returned. 3- The signal has been received in the current measurement; the current value is returned.","title":"check_signal_state"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.clear_write_window_content","text":"Clears the contents of the Write Window.","title":"clear_write_window_content"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.compile_all_capl_nodes","text":"compiles all CAPL, XML and .NET nodes.","title":"compile_all_capl_nodes"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.copy_write_window_content","text":"Copies the contents of the Write Window to the clipboard.","title":"copy_write_window_content"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.define_system_variable","text":"define_system_variable Create a system variable with an initial value Args: sys_var_name (str): The name of the system variable. Ex- \"sys_var_demo::speed\" value (Union[int, float, str]): variable value. Default value 0. Returns: object ( object ) \u2013 The new Variable object.","title":"define_system_variable"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.disable_write_window_output_file","text":"Disables logging of all outputs of the Write Window. Parameters: tab_index ( int , default: None ) \u2013 The index of the page, for which logging of the output is to be activated. Defaults to None.","title":"disable_write_window_output_file"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.enable_write_window_output_file","text":"Enables logging of all outputs of the Write Window in the output file. Parameters: output_file ( str ) \u2013 The complete path of the output file. tab_index ( int , default: None ) \u2013 The index of the page, for which logging of the output is to be activated. Defaults to None.","title":"enable_write_window_output_file"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.get_application_info","text":"Vector CANalyzer Application Version. Returns: str ( str ) \u2013 return Vector CANalyzer Application Version. \"major.minor.build\" -> \"12.01.04\"","title":"get_application_info"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.get_can_bus_statistics","text":"Returns CAN Bus Statistics. Parameters: channel ( int ) \u2013 The channel of the statistic that is to be returned. Returns: dict \u2013 CAN bus statistics.","title":"get_can_bus_statistics"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.get_canalyzer_version_info","text":"The Version class represents the version of the CANalyzer application. Returns: dict \u2013 \"full_name\" - The complete CANalyzer version. dict \u2013 \"name\" - The CANalyzer version. dict \u2013 \"build\" - The build number of the CANalyzer application. dict \u2013 \"major\" - The major version number of the CANalyzer application. dict \u2013 \"minor\" - The minor version number of the CANalyzer application. dict \u2013 \"patch\" - The patch number of the CANalyzer application.","title":"get_canalyzer_version_info"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.get_j1939_signal_full_name","text":"Determines the fully qualified name of a signal. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. Returns: str ( str ) \u2013 The fully qualified name of a signal. The following format will be used for signals: :: ::","title":"get_j1939_signal_full_name"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.get_j1939_signal_value","text":"get_j1939_signal Returns a Signal object. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. Returns: Union [ float , int ] \u2013 signal value.","title":"get_j1939_signal_value"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.get_measurement_index","text":"gets the measurement index for the next measurement. Returns: int \u2013 Measurement Index.","title":"get_measurement_index"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.get_measurement_running_status","text":"Returns the running state of the measurement. Returns: bool \u2013 True if The measurement is running. bool \u2013 False if The measurement is not running.","title":"get_measurement_running_status"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.get_signal_full_name","text":"Determines the fully qualified name of a signal. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: str ( str ) \u2013 The fully qualified name of a signal. The following format will be used for signals: :: ::","title":"get_signal_full_name"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.get_signal_value","text":"get_signal_value Returns a Signal value. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. Returns: Union [ float , int ] \u2013 signal value.","title":"get_signal_value"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.get_system_variable_value","text":"get_system_variable_value Returns a system variable value. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\" Returns: Union [ int , float , str , tuple , None] \u2013 System Variable value.","title":"get_system_variable_value"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.new","text":"Creates a new configuration. Parameters: auto_save ( bool , default: False ) \u2013 A boolean value that indicates whether the active configuration should be saved if it has been changed. Defaults to False. prompt_user ( bool , default: False ) \u2013 A boolean value that indicates whether the user should intervene in error situations. Defaults to False.","title":"new"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.open","text":"Loads CANalyzer configuration. Parameters: canalyzer_cfg ( str ) \u2013 The complete path for the CANalyzer configuration. visible ( bool , default: True ) \u2013 True if you want to see CANalyzer UI. Defaults to True. auto_save ( bool , default: False ) \u2013 A boolean value that indicates whether the active configuration should be saved if it has been changed. Defaults to False. prompt_user ( bool , default: False ) \u2013 A boolean value that indicates whether the user should intervene in error situations. Defaults to False. Raises: FileNotFoundError \u2013 error when CANalyzer config file not available in pc.","title":"open"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.quit","text":"Quits the application.","title":"quit"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.read_text_from_write_window","text":"read the text contents from Write Window. Returns: str \u2013 The text content.","title":"read_text_from_write_window"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.reset_measurement","text":"reset the measurement. Returns: bool \u2013 Measurement running status(True/False).","title":"reset_measurement"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.reset_measurement_in_offline_mode","text":"Resets the measurement in Offline mode.","title":"reset_measurement_in_offline_mode"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.save_configuration","text":"Saves the configuration. Returns: bool \u2013 True if configuration saved. else False.","title":"save_configuration"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.save_configuration_as","text":"Saves the configuration as a different CANalyzer version. Parameters: path ( str ) \u2013 The complete file name. major ( int ) \u2013 The major version number of the target version. minor ( int ) \u2013 The minor version number of the target version. create_dir ( bool , default: True ) \u2013 create directory if not available. default value True. Returns: bool \u2013 True if configuration saved. else False.","title":"save_configuration_as"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.set_measurement_index","text":"sets the measurement index for the next measurement. Parameters: index ( int ) \u2013 index value to set. Returns: int \u2013 Measurement Index value.","title":"set_measurement_index"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.set_system_variable_array_values","text":"set_system_variable_array_values sets array of values to system variable. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\" value ( tuple ) \u2013 variable values. supported integer array or double array. please always give only one type. index ( int , default: 0 ) \u2013 value of index where values will start updating. Defaults to 0.","title":"set_system_variable_array_values"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.set_system_variable_value","text":"set_system_variable_value sets a value to system variable. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\". value ( Union [ int , float , str ] ) \u2013 variable value. supported CAPL system variable data types integer, double, string and data.","title":"set_system_variable_value"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.start_measurement","text":"Starts the measurement. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement started. else False.","title":"start_measurement"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.start_measurement_in_animation_mode","text":"Starts the measurement in Animation mode. Parameters: animation_delay ( int , default: 100 ) \u2013 The animation delay during the measurement in Offline Mode.","title":"start_measurement_in_animation_mode"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.step_measurement_event_in_single_step","text":"Processes a measurement event in single step.","title":"step_measurement_event_in_single_step"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.stop_ex_measurement","text":"StopEx repairs differences in the behavior of the Stop method on deferred stops concerning simulated and real mode in CANalyzer. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement stopped. else False.","title":"stop_ex_measurement"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.stop_measurement","text":"Stops the measurement. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement stopped. else False.","title":"stop_measurement"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.ui_activate_desktop","text":"Activates the desktop with the given name. Parameters: name ( str ) \u2013 The name of the desktop to be activated.","title":"ui_activate_desktop"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.ui_open_baudrate_dialog","text":"opens the dialog for configuring the bus parameters. Make sure Measurement stopped when using this method.","title":"ui_open_baudrate_dialog"},{"location":"999_reference/#src.py_canalyzer.CANalyzer.write_text_in_write_window","text":"Outputs a line of text in the Write Window. Args: text (str): The text.","title":"write_text_in_write_window"}]}